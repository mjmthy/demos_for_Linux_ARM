diff --git a/arch/arm64/mm/fault.c b/arch/arm64/mm/fault.c
old mode 100644
new mode 100755
index df09e98..c8016b5
--- a/arch/arm64/mm/fault.c
+++ b/arch/arm64/mm/fault.c
@@ -330,8 +330,11 @@ static void do_bad_area(unsigned long addr, unsigned int esr, struct pt_regs *re
 	if (user_mode(regs)) {
 		inf = esr_to_fault_info(esr);
 		__do_user_fault(tsk, addr, esr, inf->sig, inf->code, regs);
-	} else
+	} else {
+		inf = esr_to_fault_info(esr);
+		pr_err("exp_trigger: kernel %s\n", inf->name);
 		__do_kernel_fault(mm, addr, esr, regs);
+	}
 }
 
 #define VM_FAULT_BADMAP		0x010000
@@ -402,6 +405,7 @@ static int __kprobes do_page_fault(unsigned long addr, unsigned int esr,
 	int fault, sig, code;
 	unsigned long vm_flags = VM_READ | VM_WRITE;
 	unsigned int mm_flags = FAULT_FLAG_ALLOW_RETRY | FAULT_FLAG_KILLABLE;
+	const struct fault_info *inf;
 
 	if (notify_page_fault(regs, esr))
 		return 0;
@@ -409,6 +413,15 @@ static int __kprobes do_page_fault(unsigned long addr, unsigned int esr,
 	tsk = current;
 	mm  = tsk->mm;
 
+	inf = esr_to_fault_info(esr);
+	if ((strncmp(inf->name, "level 1 access flag", 19) == 0) ||
+	    (strncmp(inf->name, "level 2 access flag", 19) == 0) ||
+	    (strncmp(inf->name, "level 3 access flag", 19) == 0)) {
+		if ((strncmp(tsk->comm, "exp_trigger_d", 13) == 0) &&
+		    (user_mode(regs)))
+			pr_err("[exp_trigger] user %s @ 0x%lx\n", inf->name, addr);
+	}
+
 	/*
 	 * If we're in an interrupt or have no user context, we must not take
 	 * the fault.
@@ -548,6 +561,8 @@ static int __kprobes do_page_fault(unsigned long addr, unsigned int esr,
 	return 0;
 
 no_context:
+	inf = esr_to_fault_info(esr);
+        pr_err("[exp_trigger] kernel %s\n", inf->name);
 	__do_kernel_fault(mm, addr, esr, regs);
 	return 0;
 }
